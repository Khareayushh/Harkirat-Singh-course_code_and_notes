In this lecture we will study about map, filter array methods and arrow functions.

Arrow Functions
Definition: Arrow functions, introduced in ECMAScript 6 (ES6), provide a concise syntax for writing function expressions in JavaScript. They simplify function declarations and offer some unique features compared to traditional function expressions.

Key Features of Arrow Functions:
Shorter Syntax: Arrow functions use a more concise syntax. Instead of using the function keyword, you use the => syntax.

Example:

// Traditional function expression
const add = function(a, b) {
  return a + b;
};

// Arrow function
const add = (a, b) => a + b;
Lexical this: In arrow functions, this refers to the nearest enclosing lexical context (the surrounding scope where the function was defined). This is different from traditional functions, where this is dynamically bound based on how the function is called.

Example:

function Person(name) {
  this.name = name;
  this.greet = () => `Hello, my name is ${this.name}`;
}

const person = new Person('Alice');
console.log(person.greet()); // Output: Hello, my name is Alice
No prototype: Arrow functions do not have their own prototype property. They inherit the prototype from the surrounding context, making them lighter than traditional functions.

Single Expression Syntax: Arrow functions are best used for single-expression functions. For multi-line functions, use traditional function expressions.

Example:

// Single line
const square = x => x * x;

// Multi-line (not recommended for arrow functions)
const sum = (a, b) => {
  let result = a + b;
  return result;
};
Usage in Higher-Order Functions: Arrow functions are often used as arguments in higher-order functions like map, filter, and reduce.

Example:

const numbers = [1, 2, 3, 4];
const doubled = numbers.map(num => num * 2);
console.log(doubled); // Output: [2, 4, 6, 8]
Array Methods: map and filter
map Method
Definition: The map method creates a new array by applying a transformation function to each element of an existing array. It does not modify the original array but returns a new one with the transformed values.

Syntax:

array.map(callback(currentValue, index, array))
callback: A function that is called for each element in the array.
currentValue: The current element being processed.
index (optional): The index of the current element.
array (optional): The array map was called upon.
Example:

const numbers = [1, 2, 3, 4];
const squares = numbers.map(num => num * num);
console.log(squares); // Output: [1, 4, 9, 16]
Use Cases:

Transforming data (e.g., changing an array of numbers to their squares).
Extracting properties from objects (e.g., getting an array of names from an array of objects).
filter Method
Definition: The filter method creates a new array with all elements that pass a test specified by a provided function. It does not modify the original array.

Syntax:

array.filter(callback(currentValue, index, array))
callback: A function that is called for each element in the array.
currentValue: The current element being processed.
index (optional): The index of the current element.
array (optional): The array filter was called upon.
Example:

const numbers = [1, 2, 3, 4, 5];
const evenNumbers = numbers.filter(num => num % 2 === 0);
console.log(evenNumbers); // Output: [2, 4]
Use Cases:

Filtering out unwanted elements (e.g., getting only the even numbers from an array).
Extracting specific items based on conditions (e.g., finding all users over a certain age).