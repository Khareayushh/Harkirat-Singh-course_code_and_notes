In this lecture we took a deep dive into what Bash is, what are command line interfaces, and by the end of lecture we also learnt how to setup NodeJS in our systems.

Understanding Bash and Unix-like Operating Systems
1. What is Bash?
Bash (Bourne Again SHell) is a command-line interpreter language and a popular shell used in Unix-like operating systems. It allows users to interact with the operating system through a command-line interface (CLI).
Functionality:
Bash interprets commands entered by the user at the command prompt and executes them.
It provides features such as scripting, job control, and various utilities for file and process management.
2. Command Line Interface (CLI) and Shells
Command Prompt: The interface where users type commands to interact with the operating system.
Shell: A program that interprets user commands and interacts with the operating system kernel to execute those commands. Examples include Bash, Zsh, and Fish.
Kernel: The core component of the operating system responsible for managing hardware and system resources.
3. Unix-like Operating Systems
Definition: Unix-like operating systems are inspired by the original Unix operating system, developed at Bell Labs in the 1970s. They exhibit certain design principles and characteristics of Unix but are not strictly Unix.
4. Key Features of Unix-like Operating Systems
Multiuser and Multitasking:
Support multiple users simultaneously.
Allow running multiple programs or processes concurrently.
Hierarchical File System:
Organize files in a tree-like directory structure.
Directories can contain both files and other directories.
Shell:
CLI interface for interacting with the operating system.
Users issue commands to perform tasks.
Portability:
Designed to run on various hardware platforms.
Separation of kernel from hardware and standard APIs facilitate portability.
Security:
Implement a file permission model.
Permissions control access to files (read, write, execute) for owner, group, and others.
Networking:
Robust networking capabilities.
Support for various networking protocols, suited for server environments.
5. Popular Unix-like Operating Systems
Linux:
Kernel used in many Unix-like systems.
Often combined with the GNU operating system to create a complete Unix-like environment (e.g., Ubuntu, Fedora).
BSD (Berkeley Software Distribution):
Unix-like operating systems based on the version developed at the University of California, Berkeley (e.g., FreeBSD, OpenBSD).
macOS:
Operating system for Apple Macintosh computers.
Based on Darwin, a Unix-based core.
6. Additional Concepts
Portability:
Unix-like systems aim for cross-platform compatibility by providing standardized APIs.
File Permissions:
Each file and directory has associated permissions that control access.
Networking:
Integrated support for networking protocols from early design phases.
Summary
Bash is a command-line interpreter that provides a way to interact with Unix-like operating systems through text-based commands.
Unix-like systems share principles from Unix, including multiuser support, hierarchical file systems, and strong networking capabilities.
Key Unix-like operating systems include Linux, BSD, and macOS, each with unique features but rooted in Unix principles.

Comprehensive Guide to Command Line Commands
1. pwd - Print Working Directory
Purpose: Displays the current working directory.
Usage:
pwd
2. ls - List Files
Purpose: Lists files and directories in the current directory.
Common Options:
-l : Detailed listing (permissions, owner, size, modification time).
-R : Recursive listing of all subdirectories.
-t : Sort by modification time (newest first).
-a : Show all files including hidden ones (those starting with .).
-s : List files by size.
-lr : Reverse order by modification time.
Combined Options:
ls -ltr : List files with detailed information, sorted by modification time in reverse order.
ls -la : List all files including hidden files.
ls -lR : Recursively list all files and directories.
ls -lt : List files sorted by modification time with timestamps.
Search Commands:
ls -lR | grep .json : Recursively find all .json files.
ls *.json : List .json files in the current directory.
ls .. : List contents of the parent directory.
3. cd - Change Directory
Purpose: Navigate between directories.
Usage:
cd directory_name
cd ..           # Move up one level
cd ../..        # Move up two levels
4. cat - Concatenate
Purpose: Display or modify file contents.
Commands:
cat file_name : Display file contents.
cat > file_name : Overwrite file with new text.
cat >> file_name : Append new text to file.
5. touch - Create New File
Purpose: Create an empty file or update the timestamp of an existing file.
Usage:
touch new_file_name
6. mkdir - Make Directory
Purpose: Create new directories.
Commands:
mkdir directory_name : Create a new directory.
mkdir -p path/to/new_directory : Create directory and its parent directories if they do not exist.
7. mv - Move
Purpose: Move or rename files and directories.
Commands:
mv source destination : Move file or directory.
mv old_name new_name : Rename a file.
mv file_name path/to/destination/ : Move file to a new location.
8. cp - Copy
Purpose: Copy files or directories.
Commands:
cp file_name destination : Copy file.
cp -r source_directory destination_directory : Recursively copy a directory.
9. rm - Remove
Purpose: Delete files or directories.
Commands:
rm file_name : Remove a file.
rm -r directory_name : Recursively remove a directory and its contents.
10. chmod - Change File Permissions
Purpose: Modify file permissions.
Syntax:
chmod [permissions] file_name
Components:
Users:
u : User
g : Group
o : Others
Permissions:
r : Read (4)
w : Write (2)
x : Execute (1)
Examples:
chmod u+x file_name : Add execute permission for the user.
chmod -R ug-x directory_name : Remove execute permission for user and group, recursively.
11. echo - Display Message
Purpose: Output text or variables.
Usage:
echo "Hello, World!"
echo $PATH        # Display environment variable
12. head and tail - Display Parts of a File
Purpose: View the beginning or end of a file.
Commands:
head file_name : Show the first 10 lines.
tail file_name : Show the last 10 lines.
head -n 20 file_name : Show the first 20 lines.
tail -n +20 file_name : Show lines starting from line 20.
sed -n '25,$p' file_name | head : Display lines 25 to end.
13. wc - Word Count
Purpose: Count lines, words, and characters in a file.
Usage:
wc file_name
wc -l file_name   # Count lines
wc -w file_name   # Count words
wc -c file_name   # Count characters
14. grep - Global Search for Regular Expression
Purpose: Search for patterns in files.
Commands:
grep pattern file_name : Search for pattern in the file.
grep -r pattern directory : Recursively search in a directory.
grep -c pattern file_name : Count occurrences.
grep -i pattern file_name : Case-insensitive search.
grep -v pattern file_name : Exclude lines containing the pattern.
grep -A n pattern file_name : Show n lines after the match.
grep -B n pattern file_name : Show n lines before the match.
grep -C n pattern file_name : Show n lines before and after the match.
15. history - Show Command History
Purpose: View previously executed commands.
Usage:
history
16. sed - Stream Editor
Purpose: Parse and transform text.
Commands:
sed -n '/pattern/p' file_name : Print lines containing pattern.
sed 's/old/new/' file_name : Substitute old with new.
sed -i.bak 's/old/new/' file_name : Substitute and create a backup file.
17. awk - Pattern Scanning and Processing Language
Purpose: Process and analyze text files.
Commands:
awk '{print $1}' file_name : Print the first column.
awk '/pattern/' file_name : Print lines matching pattern.
awk '{sum += $1} END {print sum}' file_name : Sum values in the first column.
Notes
Pipes (|) and AND (&&) Operators:
Pipes: Combine commands where the output of one command becomes the input of another. E.g., ls -l | grep '.txt'.
AND Operator: Execute a second command only if the first command succeeds. E.g., mkdir new_dir && cd new_dir.
These commands and concepts provide a strong foundation for working with the command line in Unix-like operating systems. For practical use, experimenting with these commands and their options will deepen your understanding.