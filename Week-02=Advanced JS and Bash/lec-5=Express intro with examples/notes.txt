In this lecture we tried understanding how express works with an example.
Consider the case of a person who is a doctor. This person has the skill of being a doctor and have studied to acquire that skill over various years, then they provide this as a service to people who want to use their skill.

To expose this skill to people, they open a clinic. People who want to use their skill line up in the waiting room of clinic. One by one the doctor attends them. Thus we can call this doctor to be single threaded.

How to navigate to the doctor?
We find the address of the clinic to go there, then we see a door to the clinic from which we enter the waiting room and we wait there, then when our turn comes, the doctor attends us and gives us a task, to buy medicine, get a certain test done etc etc, once we get the task done, we follow all the above mentioned steps to get our task result to doctor.

This is how an asynchronous function works. The doctor analogy here refers to a javascript thread. javascript is single threaded so it can only attend one thing at a time(patients represent functions, loops, operations or anything else that is keeping the thread occupied), the going to get medicine or get test done is like an asynchronous function because the doctor(javascript thread) does not wait for your task to get done instead it attends other people also while you are busy doing your alloted task.

So any program, even if you write the sum of two numbers simple program follows this pathway only. The function calling in the same code is like someone that is a family member to you as it knows your address of clinic and doesn't need to find your address and also does not have to pay anything, but exposing this code to the globe is a different thing as they will need the address to access the code(go to the clinic) and have to pay a certain price for it to be accessible(the doctor's service or the code written).

This exposing part is what http servers help you do.

Now the question comes how to create an HTTP server?
Answer is not one but many frameworks facilitate this service to you in variety of languages but for now we will only be focusing on express, one of the frameworks that can help us get the job done.

Express is a framework written by really smart people who wrote optimized code for making http servers so you don't have to do everything from scractch and instead you only have to call a few commands and functions, and by doing that you can simply expose your code to the world.

you can write multiple Express.js applications that listen on the same port, but you can only run one of them at a time. When you start a server on a specific port, that port becomes occupied, and attempting to start another server on the same port will result in an error due to port conflict.

Steps for Running Multiple Express.js Applications Using Environment Variables
To set up a system where you can choose which Express.js application to run using environment variables, follow these steps:

1. Create Separate Express.js Applications
Create the First Express.js Application (app1)

Create a file named app1.js.
In app1.js, set up an Express server with a basic route:

const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello from App 1!');
});

module.exports = app;
Create the Second Express.js Application (app2)

Create a file named app2.js.
In app2.js, set up another Express server with a different route:

const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello from App 2!');
});

module.exports = app;
2. Set Up a Central Server File (server.js)
Create a file named server.js.

In server.js, import the two applications and Express:

const app1 = require('./app1');
const app2 = require('./app2');
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;
Determine Which Application to Use

Use an environment variable (APP_TO_RUN) to decide which application to start.
Set up conditional logic to apply the correct application:

const selectedApp = process.env.APP_TO_RUN || 'app1';

if (selectedApp === 'app1') {
  app.use(app1);
} else if (selectedApp === 'app2') {
  app.use(app2);
} else {
  console.error('Invalid app selection');
  process.exit(1);
}
Start the Server

Listen on the specified port:

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
3. Run the Server with Different Applications
To Run app1:

Set the APP_TO_RUN environment variable to app1 and start the server:

APP_TO_RUN=app1 node server.js
To Run app2:

Set the APP_TO_RUN environment variable to app2 and start the server:

APP_TO_RUN=app2 node server.js

These different servers created are like different doctors of same hospital, they can work together in different rooms(different ports) or work in the same room but turn by turn. And the get, post, patch etc commands written in an express server are like the variety of services provided by the doctor to a patient.

Now we will learn more about the get, post, put, delete, patch etc commands in HTTP methods and how they are used in Express application with reference to the doctor analogy we talked about before-

GET- Going for a consultation to get a checkup(When you are asking something from the server, example- we asked the server what is sum till query)
POST- Going to get a new kidney inserted(If we want to put some data on our backend, example- creating new insta post)
PUT- Going to get a kidney replaced(Whenever we want to update data in backend, example- updating name on website)
DELETE- Going to get a kidney removed(If we want to delete some data on our backend, example- deleting your account)

Status codes-
200- Everything is fine
404- Doctor is not in the hospital(If request is invalid example- Route doesn't exist)
500- Mid surgery power-out happened(if something goes wrong, example- error thrown, or error encountered all give back status code 500)
411- Wrong person came for surgery(Inputs were incorrect, example- instead of sending number to sum function, we sent text)
403- You were not allowed to enter the hospital(Unauthorized access, example- try to change password for someone else's account)
And many many many more...

HTTP 304 not modified status code means that the website you're requesting hasn't been updated since the last time you accessed it. Typically, your browser will save (or cache) web pages so it doesn't have to repeatedly download the same information. This is an attempt to speed up page delivery.


The express code we wrote till get and post request is working just the way social media and other apps do, we put a new post on instagram(POST request), it gets updated for each person that is using instagram app and there is a common place connected to their server where each one can see the new posts(GET request). Mostly these requests are made asynchronous in nature so if a website is unable to get the data


Using in-memory data storage systems certainly has its advantages, such as fast access times and efficient data processing. However, there are several disadvantages associated with this approach:

Limited Storage Capacity: In-memory data storage is typically limited by the amount of RAM available on the system. This limitation can restrict the amount of data that can be stored and processed, especially for large-scale applications with massive datasets.

Cost: RAM is more expensive than traditional disk storage. Scaling up in-memory data storage systems to accommodate growing datasets can become cost-prohibitive, especially for organizations with budget constraints.

Data Volatility: In-memory data is volatile and is lost when the system is powered off or restarted. This makes it unsuitable for storing persistent data that needs to be retained across sessions unless additional mechanisms like data replication or persistence layers are implemented, which can add complexity and overhead.

Data Consistency: In-memory data systems may face challenges in maintaining data consistency, especially in distributed environments or in the event of system failures. Ensuring that data remains consistent across all nodes in a distributed system can be complex and may require implementing sophisticated replication and synchronization mechanisms.

Scalability: While in-memory data storage systems offer excellent performance for small to medium-sized datasets, scaling them to handle large and growing datasets can be challenging. Distributed in-memory data storage solutions exist to address scalability concerns, but implementing and managing such systems can be complex.

Data Persistence: Unlike traditional disk-based storage systems, in-memory data storage systems do not inherently provide data persistence. Ensuring data persistence often requires additional measures such as periodic serialization of data to disk or integrating with external data storage solutions, which can introduce additional complexity and overhead.

Risk of Data Loss: In-memory data storage systems are susceptible to data loss in the event of system failures or crashes. Without proper backup and recovery mechanisms in place, organizations risk losing critical data stored in-memory, leading to potential business disruptions and data loss.

Increased Memory Footprint: In-memory data storage systems consume significant amounts of memory resources, which can lead to increased memory footprint and resource contention, especially in shared or virtualized environments. This can impact the overall performance and stability of the system.

Security Concerns: In-memory data storage systems may pose security risks, as sensitive data stored in-memory can be vulnerable to unauthorized access or attacks. Implementing robust security measures such as encryption, access controls, and monitoring is essential to mitigate these risks.

Complexity of Management: Managing in-memory data storage systems can be more complex compared to traditional disk-based storage systems. Tasks such as data replication, synchronization, and memory management require specialized knowledge and expertise, increasing the complexity and operational overhead of managing these systems.

Overall, while in-memory data storage offers significant performance benefits, organizations must carefully consider these disadvantages and weigh them against their specific requirements and constraints when evaluating the suitability of in-memory data storage solutions for their applications.


Its the duty of a backend engineer to take care of all edge cases and ensure that server is up and running always and not displaying unknown errors or crashing and should always return the correct status codes when encountered by different scenarios.


To catch anything written after a certain route, we add :fileName(fileName is a not a fixed keyword and can be anything) after the route when mentioning the route in method and thus have to also do const a = req.params.fileName to get the query parameters.

In assignment we have to http-fy the fs readFile into a get method and take any random query parameters using above line to read certain file.