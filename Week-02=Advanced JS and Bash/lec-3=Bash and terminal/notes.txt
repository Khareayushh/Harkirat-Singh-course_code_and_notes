In this lecture we explored more about command prompt and the various commands we can write in it to get our work done. All the commands mentioned in this video have already been discussed in the next video that was a more in depth advanced guide of bash, command prompt and NodeJS so refer to notes of lecture 2.4 for all info.

Command Prompt and Related Concepts
1. What is Command Prompt?
The Command Prompt, or terminal, is a text-based interface that allows users to interact with their operating system and execute various commands. It provides a way to perform tasks such as file manipulation, navigation, and system management without a graphical user interface.

2. Basic Navigation Commands:
cd (Change Directory): Navigate between directories.
cd .. - Move up one directory level.
cd ../.. - Move up two directory levels.
pwd (Print Working Directory): Display the current directory path.
3. File and Folder Management:
mkdir (Make Directory): Create a new directory.
Example: mkdir new_folder
touch: Create a new file (primarily used in Unix-like systems).
Example: touch new_file.txt
cp (Copy): Copy files or directories.
Example: cp source_file.txt destination_file.txt
For copying directories: cp -r source_directory destination_directory
mv (Move): Move or rename files and directories.
Example: mv old_name.txt new_name.txt
rm (Remove): Delete files or directories.
Example: rm file_to_delete.txt
For deleting directories: rm -r directory_to_delete
4. Node Version Manager (nvm):
What is nvm?
nvm stands for Node Version Manager. It is a bash script that allows users to install, manage, and switch between multiple versions of Node.js on the same machine.
Why Use nvm?
Manage Multiple Versions: Install and manage different Node.js versions.
Easy Version Switching: Quickly switch between Node.js versions for different projects.
Global Packages: Install global packages for different Node.js versions.
Share Versions: Share Node.js versions across users on the same machine.
Simplified Installation: Easy installation and management of Node.js versions.
Compatibility: Ensures compatibility between different Node.js versions and npm.
5. Node.js Shell:
Entering Node.js Shell:
Type node in the command prompt to enter an interactive Node.js shell, where you can write and execute JavaScript code.
Example:
bash
Copy code
node
> console.log('Hello, World!');
Hello, World!
Running JavaScript Files:
Use node filename.js to execute JavaScript files and view the output.
Example: node script.js
6. npm (Node Package Manager):
What is npm?
npm is the default package manager for Node.js. It is used to install, manage, and share Node.js packages and dependencies.
Key Features of npm:
Install Packages: Install libraries and tools needed for development.
Example: npm install package_name
Manage Dependencies: Specify project dependencies in package.json and install them using npm install.
Global Packages: Install packages globally that are accessible from any project.
Example: npm install -g package_name
Share Code: Publish and share packages with the community via the npm registry.
Example: npm publish
7. Additional Concepts:
package.json: A file in Node.js projects that lists the project's dependencies, scripts, and metadata.
npm init: Initializes a new Node.js project and creates a package.json file.
npm update: Updates the dependencies listed in package.json to their latest versions.
Summary:
The Command Prompt is a powerful tool for interacting with your operating system via text commands.
Basic commands include navigation (cd, pwd), file management (mkdir, touch, cp, mv, rm), and using Node.js tools like nvm and npm.
nvm simplifies managing multiple Node.js versions, while npm facilitates package management and project dependency handling.